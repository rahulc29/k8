package org.waoss.k8.cpu

import kotlinx.coroutines.Deferred
import kotlinx.coroutines.async
import kotlinx.coroutines.coroutineScope
import org.waoss.k8.Loggable
import org.waoss.k8.io.IOEngine

interface Memory<T : Number> : Loggable {
    val size: Int
    operator fun get(index: Int): T
    operator fun set(index: Int, value: T)
    fun forEach(digest: (T) -> Unit)
}

suspend fun IOEngine.constructMemory(): Deferred<Memory<Byte>> = coroutineScope {
    async {
        val array = readAllAsync().await() // blocking call but safe in async {}
        return@async ByteArrayMemory(array = array, size = array.size)
    }
}

val SPRITES = listOf(
    listOf(0xf0, 0x90, 0x90, 0x90, 0xf0), // 0
    listOf(0x20, 0x60, 0x20, 0x20, 0x70), // 1
    listOf(0xf0, 0x10, 0xf0, 0x80, 0xf0), // 2
    listOf(0xf0, 0x10, 0xf0, 0x10, 0xf0), // 3
    listOf(0x90, 0x90, 0xf0, 0x10, 0x10), // 4
    listOf(0xf0, 0x80, 0xf0, 0x10, 0xf0), // 5
    listOf(0xf0, 0x80, 0xf0, 0x90, 0xf0), // 6
    listOf(0xf0, 0x10, 0x20, 0x40, 0x40), // 7
    listOf(0xf0, 0x90, 0xf0, 0x90, 0xf0), // 8
    listOf(0xf0, 0x90, 0xf0, 0x10, 0xf0), // 9
    listOf(0xf0, 0x90, 0xf0, 0x90, 0x90), // A
    listOf(0xe0, 0x90, 0xe0, 0x90, 0xe0), // B
    listOf(0xf0, 0x80, 0x80, 0x80, 0xf0), // C
    listOf(0xe0, 0x90, 0x90, 0x90, 0xe0), // D
    listOf(0xf0, 0x80, 0xf0, 0x80, 0xf0), // E
    listOf(0xf0, 0x80, 0xf0, 0x80, 0x80)  // F
).map { list -> list.map { it.toByte() } }